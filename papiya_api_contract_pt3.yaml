openapi: 3.0.0
info:
  title: "Papiya API"
  description: "API documentation for Papiya backend - contract for frontend integration with React and React Native."
  version: "1.0.0"

paths:

  # Restaurant Endpoints
  /api/restaurants:
    post:
      summary: "Create a new restaurant"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
              required: ["name", "address", "phone"]
      responses:
        "201":
          description: "Restaurant created successfully"
        "400":
          description: "Bad Request"

  /api/restaurants/{id}:
    get:
      summary: "Get restaurant details by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Restaurant details"
        "404":
          description: "Restaurant not found"
    put:
      summary: "Update a restaurant's information"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                phone:
                  type: string
      responses:
        "200":
          description: "Restaurant updated successfully"
        "404":
          description: "Restaurant not found"
    delete:
      summary: "Delete a restaurant"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Restaurant deleted successfully"
        "404":
          description: "Restaurant not found"

  # Shopping List Endpoints
  /api/shopping-list:
    post:
      summary: "Create a shopping list"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      ingredientId:
                        type: string
                      quantity:
                        type: number
                    required: ["ingredientId", "quantity"]
              required: ["userId", "items"]
      responses:
        "201":
          description: "Shopping list created successfully"
        "400":
          description: "Bad Request"

  /api/shopping-list/{id}:
    get:
      summary: "Get a shopping list by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Shopping list details"
        "404":
          description: "Shopping list not found"
    put:
      summary: "Update a shopping list"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                items:
                  type: array
                  items:
                    type: object
                    properties:
                      ingredientId:
                        type: string
                      quantity:
                        type: number
      responses:
        "200":
          description: "Shopping list updated successfully"
        "404":
          description: "Shopping list not found"
    delete:
      summary: "Delete a shopping list"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Shopping list deleted successfully"
        "404":
          description: "Shopping list not found"

  /api/shopping-list/auto-generate:
    post:
      summary: "Auto-generate a shopping list based on selected recipes"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                recipes:
                  type: array
                  items:
                    type: string
                  description: "Array of recipe IDs"
              required: ["userId", "recipes"]
      responses:
        "201":
          description: "Shopping list generated successfully"
        "400":
          description: "Bad Request"

  # User Endpoints
  /api/users:
    post:
      summary: "Register a new user"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                userType:
                  type: string
                  enum: ["restaurant", "domestic"]
              required: ["email", "password", "name", "userType"]
      responses:
        "201":
          description: "User created successfully"
        "400":
          description: "Bad Request"
  
  /api/users/{id}:
    get:
      summary: "Get user details by ID"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User details"
        "404":
          description: "User not found"
    put:
      summary: "Update a user's information"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                name:
                  type: string
      responses:
        "200":
          description: "User updated successfully"
        "404":
          description: "User not found"
    delete:
      summary: "Delete a user account"
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "User deleted successfully"
        "404":
          description: "User not found"

components:
  schemas:
    Restaurant:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        phone:
          type: string

    ShoppingList:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/Ingredient"

    User:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
        name:
          type: string
        userType:
          type: string
          enum: ["restaurant", "domestic"]

    Ingredient:
      type: object
      properties:
        ingredientId:
          type: string
        quantity:
          type: number
